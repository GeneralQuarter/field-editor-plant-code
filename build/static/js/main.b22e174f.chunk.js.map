{"version":3,"sources":["components/ConfigScreen.tsx","components/Field.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Field","commonInfoField","entry","fields","field","entrySys","getSys","useEffect","onValueChanged","value","publishedAt","setValue","getValue","space","getEntry","sys","id","commonInfo","codeStart","genus","fr","species","toUpperCase","searchQuery","content_type","contentType","order","limit","getEntries","results","total","lastPlant","items","lastNumber","parseInt","code","split","baseSdk","isInitiallyDisabled","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","forEach","componentLocationSetting","is","render"],"mappings":"qSAeqBA,E,kDACnB,WAAYC,GAAqB,IAAD,8BAC9B,cAAMA,IAqBRC,YAtBgC,sBAsBlB,4BAAAC,EAAA,sEAOe,EAAKF,MAAMG,IAAIC,IAAIC,kBAPlC,cAONC,EAPM,yBASL,CAELC,WAAY,EAAKC,MAAMD,WAGvBE,YAAaH,IAdH,2CApBZ,EAAKE,MAAQ,CAAED,WAAY,IAK3BP,EAAMG,IAAIC,IAAIH,aAAY,kBAAM,EAAKA,iBAPP,E,4FAUhC,mCAAAC,EAAA,sEAG6DQ,KAAKV,MAAMG,IAAIC,IAAIO,gBAHhF,OAGQJ,EAHR,OAKEG,KAAKE,SAASL,EAAa,CAAEA,cAAeG,KAAKF,OAAO,WAGtD,EAAKR,MAAMG,IAAIC,IAAIS,cARvB,gD,0EA8BA,WACE,OACE,cAAC,IAAD,CAAWC,UAAWC,YAAI,CAAEC,OAAQ,SAApC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,cAAC,IAAD,+D,GA9C0BC,a,QC6CrBC,EApDD,SAAC,GAAuB,IAAtBf,EAAqB,EAArBA,IAIRgB,EAAkBhB,EAAIiB,MAAMC,OAAV,WAClBC,EAAQnB,EAAImB,MACZC,EAAWpB,EAAIiB,MAAMI,SA2C3B,OAzCAC,qBAAU,WAsCR,OArC2BN,EAAgBO,eAAhB,uCAA+B,WAAMC,GAAN,yBAAAzB,EAAA,yDACnDyB,EADmD,uBAEjDJ,EAASK,aACZN,EAAMO,SAAS,IAHqC,8BAQpDP,EAAMQ,WAR8C,iEAY1B3B,EAAI4B,MAAMC,SAASL,EAAMM,IAAIC,IAZH,cAYlDC,EAZkD,OAclDC,EAAY,UAAGD,EAAWd,OAAOgB,MAAMC,GAAG,IAA9B,OAAmCH,EAAWd,OAAOkB,QAAQD,GAAG,GAAhE,KAAsEE,cAElFC,EAAc,CAClBC,aAAcnB,EAASoB,YAAYV,IAAIC,GACvC,qBAAsBE,EACtB,aAAcb,EAASW,GACvBU,MAAO,eACPC,MAAO,GArB+C,UAwBlC1C,EAAI4B,MAAMe,WAAWL,GAxBa,WA0BlC,KAFhBM,EAxBkD,QA0B5CC,MA1B4C,wBA2BtD1B,EAAMO,SAASO,EAAY,GA3B2B,2BA+BlDa,EAAiBF,EAAQG,MAAM,GAC/BC,EAAaC,SAASH,EAAU5B,OAAOgC,KAAKf,GAAGgB,MAAM,KAAK,IAEhEhC,EAAMO,SAASO,GAAae,EAAa,IAlCe,4CAA/B,0DAwCtB,cAAC,IAAD,CAAYI,QAASpD,EAAKmB,MAAOA,EAAOkC,qBAAqB,KCxCtEC,gBAAK,SAAAtD,GACH,IAAMuD,EAAOC,SAASC,eAAe,QAEH,CAChC,CACEC,SAAUC,YAAUC,oBACpBC,UAAW,cAAC,EAAD,CAAQ7D,IAAKA,KAE1B,CACE0D,SAAUC,YAAUG,qBACpBD,UAAW,cAAC,EAAD,CAAO7D,IAAKA,MAKD+D,SAAQ,SAACC,GAC7BhE,EAAI0D,SAASO,GAAGD,EAAyBN,WAC3CQ,iBAAOF,EAAyBH,UAAWN,W","file":"static/js/main.b22e174f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Field Editor: Plant Code</Heading>\n          <Paragraph>No additional configuration required :)</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport { FieldExtensionSDK } from '@contentful/app-sdk';\nimport { SlugEditor } from '@contentful/field-editor-slug';\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\nconst Field = ({sdk}: FieldProps) => {\n  // If you only want to extend Contentful's default editing experience\n  // reuse Contentful's editor components\n  // -> https://www.contentful.com/developers/docs/extensibility/field-editors/\n  const commonInfoField = sdk.entry.fields['commonInfo'];\n  const field = sdk.field;\n  const entrySys = sdk.entry.getSys();\n  \n  useEffect(() => {\n    const removeSubscription = commonInfoField.onValueChanged(async value => {\n      if (!value) {\n        if (!entrySys.publishedAt) {\n          field.setValue('');\n        }\n        return;\n      }\n\n      if (field.getValue()) {\n        return;\n      }\n\n      const commonInfo: any = await sdk.space.getEntry(value.sys.id);\n      \n      const codeStart = `${commonInfo.fields.genus.fr[0]}${commonInfo.fields.species.fr[0]}-`.toUpperCase();\n\n      const searchQuery = {\n        content_type: entrySys.contentType.sys.id,\n        'fields.code[match]': codeStart,\n        'sys.id[ne]': entrySys.id,\n        order: '-fields.code',\n        limit: 1\n      }\n\n      const results = await sdk.space.getEntries(searchQuery);\n\n      if (results.total === 0) {\n        field.setValue(codeStart + 1);\n        return;\n      }\n\n      const lastPlant: any = results.items[0];\n      const lastNumber = parseInt(lastPlant.fields.code.fr.split('-')[1]);\n\n      field.setValue(codeStart + (lastNumber + 1));\n    })\n\n    return removeSubscription;\n  });\n\n  return <SlugEditor baseSdk={sdk} field={field} isInitiallyDisabled={true} />\n};\n\nexport default Field;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport Field from './components/Field';\n\ninit(sdk => {\n  const root = document.getElementById('root');\n\n  const ComponentLocationSettings = [\n    {\n      location: locations.LOCATION_APP_CONFIG,\n      component: <Config sdk={sdk as AppExtensionSDK} />,\n    },\n    {\n      location: locations.LOCATION_ENTRY_FIELD,\n      component: <Field sdk={sdk as FieldExtensionSDK} />,\n    },\n  ];\n\n  // Select a component depending on a location in which the app is rendered.\n  ComponentLocationSettings.forEach((componentLocationSetting) => {\n    if (sdk.location.is(componentLocationSetting.location)) {\n      render(componentLocationSetting.component, root);\n    }\n  });\n});\n"],"sourceRoot":""}